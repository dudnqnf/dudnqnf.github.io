<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-24T14:38:44+09:00</updated><id>http://localhost:4000/</id><title type="html">LeeHyunSik</title><subtitle>blog</subtitle><entry><title type="html">AWS/EC2 Selenium</title><link href="http://localhost:4000/AWS_EC2_Selenium/" rel="alternate" type="text/html" title="AWS/EC2 Selenium" /><published>2018-07-16T00:00:00+09:00</published><updated>2018-07-16T00:00:00+09:00</updated><id>http://localhost:4000/AWS_EC2_Selenium</id><content type="html" xml:base="http://localhost:4000/AWS_EC2_Selenium/">&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;
&lt;p&gt;https://christopher.su/2015/selenium-chromedriver-ubuntu/&lt;/p&gt;

&lt;h4 id=&quot;트러블-이슈&quot;&gt;트러블 이슈…&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;기본적으로 Logging으로 확인&lt;/li&gt;
  &lt;li&gt;selenium 버전문제&lt;/li&gt;
  &lt;li&gt;webdriver 접근문제&lt;/li&gt;
  &lt;li&gt;(beautifulsoup4) html5lib -&amp;gt; lxml&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="AWS" /></entry><entry><title type="html">AWS/EC2 Django diploy</title><link href="http://localhost:4000/AWS_EC2_Django/" rel="alternate" type="text/html" title="AWS/EC2 Django diploy" /><published>2018-07-12T00:00:00+09:00</published><updated>2018-07-12T00:00:00+09:00</updated><id>http://localhost:4000/AWS_EC2_Django</id><content type="html" xml:base="http://localhost:4000/AWS_EC2_Django/">&lt;h4 id=&quot;aws-서버세팅&quot;&gt;AWS 서버세팅&lt;/h4&gt;
&lt;p&gt;… 이전글 참조&lt;/p&gt;

&lt;h4 id=&quot;과정&quot;&gt;과정&lt;/h4&gt;
&lt;p&gt;https://lhy.kr/ec2-ubuntu-deploy&lt;/p&gt;

&lt;h4 id=&quot;트러블-이슈&quot;&gt;트러블 이슈…&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# z-shell은 선택이나 PATH설정 해주는 부분은 개인적으로 찾아서...

# uWSGI작동확인
uwsgi \
--http :(port) \
--home (virtualenv경로) \
--chdir &amp;lt;django프로젝트 경로&amp;gt; \
-w &amp;lt;설정 패키지명&amp;gt;.wsgi
&amp;lt;설정 패키지명&amp;gt; -&amp;gt; 장고 프로젝트 안의 wsgi파일 위치




# Nginx 서비스 파일 안만들면 작동 안함
(uwsgi.service는 과정안에 들어가 있음)
# /etc/systemd/system/Nginx.service
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target




# Nginx 가상서버 설정 파일 작성
uwsgi_pass = unix:///tmp/server.sock
=&amp;gt; tmp 파일에 넣으면 읽지를 못함
=&amp;gt; run 파일로 변경(이 두가지 파일 전부)
/etc/nginx/sites-available/server.conf
/프로젝트 디렉토리.../uwsgi.ini


# 나머지 트러블 이슈...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;django-logging-ec2&quot;&gt;Django Logging (EC2)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# settings.py
# LOG_DIR 는 접근이 가능해야 하므로 chmod나 chown 설정 변경해줘야 됨

LOG_DIR = '/var/log'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            'format': '[%(asctime)s] %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'file_error': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'ERROR',
            'formatter': 'django.server',
            'backupCount': 10,
            'filename': os.path.join(LOG_DIR, 'django_error.log'),
            'maxBytes': 10485760,
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_error'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}


# views.py
# 기본적인 로그가 찍히기는 하나...
# Exception으로 처리해줌
import logging

logger = logging.getLogger(&quot;django&quot;)
  	try:
  		...
  	except Exception as e:
  		logger.error(e)
  		...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="AWS" /></entry><entry><title type="html">Django</title><link href="http://localhost:4000/Django/" rel="alternate" type="text/html" title="Django" /><published>2018-07-10T00:00:00+09:00</published><updated>2018-07-10T00:00:00+09:00</updated><id>http://localhost:4000/Django</id><content type="html" xml:base="http://localhost:4000/Django/">&lt;h4 id=&quot;프로젝트-구조&quot;&gt;프로젝트 구조&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 프로젝트 생성
# Command
django-admin startproject mysite


# 세팅변경
# mysite/settings.py
TIME_ZONE = 'Asia/Seoul'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.pythonanywhere.com']

DATABASES = {
  'default': {
      'ENGINE': 'django.db.backends.sqlite3',
      'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
  }
}

# 데이터베이스를 생성
# Command
python manage.py migrate

# 서버 실행
python manage.py runserver

# 어플리케이션 생성
python manage.py startapp blog

# 세팅에 블로그 추가
# mysite/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
]

# 블로그 글 모델 생성
# blog/models.py
from django.db import models
from django.utils import timezone

class Post(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

# migration 생성
# Command
python manage.py makemigrations blog

# migration 적용
# Command
python manage.py migrate blog

# 장고 관리자
# blog/admin.py
from django.contrib import admin
from .models import Post

admin.site.register(Post)

# Command
python manage.py migrate

# SuperUser 생성
# Command
python manage.py createsuperuser

# 장고 URL
# mysite/urls.py
from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'', include('blog.urls')),
]

# blog/urls.py
# 새로생성
from django.conf.urls import url
from . import views
urlpatterns = [
    url(r'^$', views.post_list, name='post_list'),
]


# blog/views.py
from django.shortcuts import render
def post_list(request):
  return render(request, 'blog/post_list.html', {})

# blog/templates/blog/post_list.html
# templates 디렉토리, blog 디렉토리, post_list.html 파일 새로 생성
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hi there!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;It works!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;장고-쉘&quot;&gt;장고 쉘&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Command
python manage.py shell

# 객체조회
from blog.models import Post
Post.objects.all()

# 객체생성
from django.contrib.auth.models import User
User.objects.all()
me = User.objects.get(username='user')
Post.objects.create(author=me, title='Sample title', text='Test')

# 필터
Post.objects.filter(author=me)
Post.objects.filter(title__contains='title')

# publish 후 필터
post = Post.objects.get(title=&quot;Sample title&quot;)
post.publish()
from django.utils import timezone
Post.objects.filter(published_date__lte=timezone.now())

# 정렬
Post.objects.order_by('created_date')

# Chaining
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;템플릿-동적-데이터&quot;&gt;템플릿 동적 데이터&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# blog/views.py
from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
return render(request, 'blog/post_list.html', {'posts': posts})

# blog/templates/blog/post_list.html
&amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Django Girls Blog&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;

{% for post in posts %}
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;published: &amp;lt;/p&amp;gt;
        &amp;lt;h1&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;정적-파일&quot;&gt;정적 파일&lt;/h4&gt;
&lt;p&gt;{% highlight python %}
    # blog/static/css/blog.css
    # 파일생성
    h1 a {
        color: #FCA205;
    }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# blog/templates/blog/post_list.html
{% load staticfiles %}
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'css/blog.css' %}&quot;&amp;gt; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;템플릿-확장&quot;&gt;템플릿 확장&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# post_list.html
{% extends 'blog/base.html' %}

{% block content %}
{% for post in posts %}
        &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
        &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
        &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
{% endfor %}
{% endblock %}

# base.html
&amp;lt;body&amp;gt;
  {% block content %}
  {% endblock %}
&amp;lt;/body&amp;gt;

# !호출은 그대로 post_list.html 호출해 주면 됨
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;mysql-연동&quot;&gt;Mysql 연동&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Command
pip install Mysqlclient

# 오류 난다면 여기로 들어가서 직접 다운로드(python 버전(cp), 파이썬 비트(win))
https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient

# Command
pip install {다운 받은 whl 파일 이름}

# settings.py
DATABASES = {
    'default':{
        'ENGINE':'django.db.backends.mysql',
        'NAME':'database_name',
        'USER':'user_name',
        'PASSWORD':'user_password',
        'HOST':'host.com',
        'PORT':'3306',
    }
}

# 적용
# Command
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Django" /></entry><entry><title type="html">Javascript</title><link href="http://localhost:4000/Javascript/" rel="alternate" type="text/html" title="Javascript" /><published>2018-07-05T00:00:00+09:00</published><updated>2018-07-05T00:00:00+09:00</updated><id>http://localhost:4000/Javascript</id><content type="html" xml:base="http://localhost:4000/Javascript/">&lt;h4 id=&quot;basic-javascript&quot;&gt;Basic Javascript&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 변수
  var a, b;

// 변수에 함수대입
  var c = function(){
    ...
  }

// 함수(=객체)
  function func(){}
  func();
  // window 생략가능
  window.func();

// 객체
  a = {}
  b = {
    a : 1,
    b : function(){
      alert('');
    }
  }

// 인스턴스 생성
  a = new func();

// 클로져

// 함수 즉시호출
  (function func(){
    ...
  }())

// 전역 객체의 함수호출
  window.func();


// 객체의 함수
  instance.func();
  window.instance.func();
  ---&amp;gt; Instance.func 호출시 this == Instance


// o1호출(전역)과 o2호출 차이
  function func(){}
  var o1 = func();
  var o2 = new func();


// apply, call
  var o = {}
  var p = {}
  function func(){
      switch(this){
          case o:
              document.write('o&amp;lt;br /&amp;gt;');
              break;
          case p:
              document.write('p&amp;lt;br /&amp;gt;');
              break;
          case window:
              document.write('window&amp;lt;br /&amp;gt;');
              break;          
      }
  }
  func();
  func.apply(o);
  func.apply(p);


// 리터럴
  a = [1,2,3]
  a = new array(1,2,3)

  Function b(x, y) = { return x + y }
  b = new Function('x', 'y', 'return x+y')

  c = {}
  c = new Object()

// 프로토타입
  // 모든 객체는 프로토타입이 존재
  function Person(name){
      this.name = name;
  }
  Person.prototype.name=null;
  Person.prototype.introduce = function(){
      return 'My name is '+this.name;
  }

  function Programmer(name){
      this.name = name;
  }
  Programmer.prototype = new Person();
  Programmer.prototype.coding = function(){
      return &quot;hello world&quot;;
  }

  var p1 = new Programmer('egoing');
  document.write(p1.introduce()+&quot;&amp;lt;br /&amp;gt;&quot;);
  document.write(p1.coding()+&quot;&amp;lt;br /&amp;gt;&quot;);

  // 객체 함수 정의는 프로토 타입에(객체.prototype.함수 = function(){})
  // 객체 함수 호출은 객체.함수
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ecmascript2016&quot;&gt;ECMAScript2016&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Class
  class Person {
      constructor (id, name) {
          this.id = id
          this.name = name
      }
      toString() {
          return `(${this.id}, ${this.name})`
      }
  }

  class Student extends Person {
      constructor (id, name, age) {
          super(id, name)
          this.age = age
      }
      toString() {
          return super.toString() + ' and ' + this.age
      }
  }

// let&amp;amp;const
  const schoolName = &quot;ABC&quot;
  schoolName = &quot;CBA&quot;  // Error
  // 호이스팅이 사라짐
  function test() {
    let x = &quot;a&quot;
    if (true) {
      let x = &quot;b&quot;
      console.log(x);  // b
    }
    console.log(x);  // a
  }

// Arrow Functions
  const squares = [1, 2, 3].map(x =&amp;gt; x * x) // 1, 4, 9

  // this에 대한 이전코드
  function NumberEx() {
    var that = this
    that.num = 0;
    setInterval(function add() {
      // setInterval 안에서의 this 는 NumberEx의 this가 아니므로 다른 변수에 this 를 지정하여 씁니다.
      that.num++;
      console.log(that.num);
    }, 1000);
  }

  // this에 대한 바뀐코드
  function NumberEx() {
    this.num = 0

    setInterval(() =&amp;gt; {
      this.num++ // this is from NumberEx
    }, 1000)
  }

// module
  // utility.js
  export const squares = (arr) =&amp;gt; { return arr.map(x =&amp;gt; x * x) }

  // math.js
  import { squares } from &quot;utility&quot;
  console.log(squares([1,2,3])) // [1,4,9]


// Promises
var promiseTest = (num) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
      if (num &amp;gt; 3) {
          resolve(num)
      } else {
          reject(&quot;err&quot;)
      }
  }
}

promiseTest(5)
  .then(val =&amp;gt; console.log(val)) // 5
  .catch(err =&amp;gt; console.log(err))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Language" /></entry><entry><title type="html">Ubuntu_pyenv</title><link href="http://localhost:4000/Ubuntu_pyenv/" rel="alternate" type="text/html" title="Ubuntu_pyenv" /><published>2018-07-02T00:00:00+09:00</published><updated>2018-07-02T00:00:00+09:00</updated><id>http://localhost:4000/Ubuntu_pyenv</id><content type="html" xml:base="http://localhost:4000/Ubuntu_pyenv/">&lt;h4 id=&quot;pyenv&quot;&gt;pyenv&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev

curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash

# path 설정
vi ~/.bashrc
export PATH = $PATH:/home:/var
export PATH=&quot;/root/.pyenv/bin:$PATH&quot;
eval &quot;$(pyenv init -)&quot;
eval &quot;$(pyenv virtualenv-init -)&quot;
source ~/.bashrc

# pyenv 가상환경 만들기
pyenv install --list
pyenv install 3.6.4
pyenv global 3.6.4
pyenv versions

# pyenv 가상환경 적용
pyenv virtualenv 3.6.4 sample-env
pyenv local sample-env
pyenv shell uwsgi-env
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Python Note" /></entry><entry><title type="html">AWS/EC2 Server Setting</title><link href="http://localhost:4000/AWS_EC2_Server_Setting/" rel="alternate" type="text/html" title="AWS/EC2 Server Setting" /><published>2018-07-02T00:00:00+09:00</published><updated>2018-07-02T00:00:00+09:00</updated><id>http://localhost:4000/AWS_EC2_Server_Setting</id><content type="html" xml:base="http://localhost:4000/AWS_EC2_Server_Setting/">&lt;h4 id=&quot;aws-가입&quot;&gt;AWS 가입&lt;/h4&gt;
&lt;h4 id=&quot;ec2-인스턴스-생성&quot;&gt;EC2 인스턴스 생성&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu Server 14.04 LTS (HVM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;puttyputtygenpageant-설치&quot;&gt;putty/puttygen/pageant 설치&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;puttygenpageant&quot;&gt;puttygen/pageant&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;public_key / private_key 생성&lt;/li&gt;
  &lt;li&gt;EC2 키페어에 public_key 등록&lt;/li&gt;
  &lt;li&gt;pageant : private_key 등록&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;putty&quot;&gt;putty&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;public DNS or public IP&lt;/li&gt;
  &lt;li&gt;connection -&amp;gt; SSH -&amp;gt; Auth 에서 private_key 등록(pageant 있으면 안해도 되는듯 함)&lt;/li&gt;
  &lt;li&gt;접속&lt;/li&gt;
  &lt;li&gt;user_id : ubuntu&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mysql&quot;&gt;mysql&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mysql 설치
apt-get update
apt-get install mysql-server

# mysql 접속
select host, user, password from user;
GRANT ALL PRIVILEGES ON *.* TO '계정명'@'%';
FLUSH PRIVILEGES;

# mysql 외부접속 설정변경
vim /etc/mysql/my.cnf
bind-address = 0.0.0.0
service mysqld restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EC2 인바운드 규칙 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pyenv-설치&quot;&gt;pyenv 설치&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev

curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash

# path설정
vi ~/.bashrc
export PATH = $PATH:/home:/var
export PATH=&quot;/root/.pyenv/bin:$PATH&quot;
eval &quot;$(pyenv init -)&quot;
eval &quot;$(pyenv virtualenv-init -)&quot;
source ~/.bashrc

pyenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="AWS" /></entry><entry><title type="html">numpy</title><link href="http://localhost:4000/python_note-numpy/" rel="alternate" type="text/html" title="numpy" /><published>2018-03-05T00:00:00+09:00</published><updated>2018-03-05T00:00:00+09:00</updated><id>http://localhost:4000/python_note#numpy</id><content type="html" xml:base="http://localhost:4000/python_note-numpy/">&lt;h1 id=&quot;numpy&quot;&gt;Numpy&lt;/h1&gt;

&lt;h4 id=&quot;개요&quot;&gt;개요&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;행렬 계산을 편리하게 해주는 파이썬 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기본&quot;&gt;기본&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
  import numpy as np

  # 배열 생성
  arr = np.array([1,2,3])

  # 브로드캐스트
  arr = np.array([[1,2],[3,4]]) * np.array([1,2]) # [[1,4],[3,8]]

  # 원소 접근
  arr[1,1] # arr[1][1]
  arr[:] # 전체 행렬
  arr[:1] # 0번째 행까지
  arr[1:] # 1번째 행부터
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="Python Note" /></entry><entry><title type="html">matplotlib</title><link href="http://localhost:4000/python_note-matplotlib/" rel="alternate" type="text/html" title="matplotlib" /><published>2018-03-05T00:00:00+09:00</published><updated>2018-03-05T00:00:00+09:00</updated><id>http://localhost:4000/python_note#matplotlib</id><content type="html" xml:base="http://localhost:4000/python_note-matplotlib/">&lt;h1 id=&quot;matplotlib&quot;&gt;matplotlib&lt;/h1&gt;

&lt;h4 id=&quot;개요&quot;&gt;개요&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;그래프를 그려주는 파이썬 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기본&quot;&gt;기본&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
  import matplotlib.pyplot as plt

  # 데이터 준비
  x = np.arange(0, 6, 0.1) # 0에서 6까지 0.1 간격으로 생성
  y1 = np.sin(x)
  y2 = np.cos(x)

  # 그래프 그리기
  plt.plot(x, y1, label=&quot;sin&quot;)
  plt.plot(x, y2, linestyle = &quot;--&quot;, label=&quot;cos&quot;) # cos 함수는 점선으로 그리기
  plt.xlabel(&quot;x&quot;) # x축 이름
  plt.ylabel(&quot;y&quot;) # y축 이름
  plt.title('sin &amp;amp; cos')  # 제목
  plt.legend()
  plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;이미지-표시&quot;&gt;이미지 표시&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
  import matplotlib.pyplot as plt
  from matplotlib.image import imread

  img = imread('../dataset/lena.png') # 이미지 읽어오기
  plt.imshow(img)

  plt.show()
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="Python Note" /></entry><entry><title type="html">윈도우에서 아타리 설치방법</title><link href="http://localhost:4000/ML_note-window-atari-install/" rel="alternate" type="text/html" title="윈도우에서 아타리 설치방법" /><published>2018-01-01T00:00:00+09:00</published><updated>2018-01-01T00:00:00+09:00</updated><id>http://localhost:4000/ML_note#window%20atari%20install</id><content type="html" xml:base="http://localhost:4000/ML_note-window-atari-install/">&lt;h1 id=&quot;윈도우에서-아타리-설치방법&quot;&gt;윈도우에서 아타리 설치방법&lt;/h1&gt;

&lt;h4 id=&quot;msys2&quot;&gt;MSYS2&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.msys2.org/&lt;/li&gt;
  &lt;li&gt;CMAKE 등 설치를 위해 필요&lt;/li&gt;
  &lt;li&gt;msys2실행
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;pacman -S base-devel mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;시스템-환경변수-변경&quot;&gt;시스템 환경변수 변경&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;DISPLAY = :0  (새로만들기)&lt;/li&gt;
  &lt;li&gt;PHTYONPATH = c:\path\to\atari-py:$PYTHONPATH  (새로만들기)&lt;/li&gt;
  &lt;li&gt;path
    &lt;ul&gt;
      &lt;li&gt;C:\msys64\mingw64\bin (추가)&lt;/li&gt;
      &lt;li&gt;C:\msys64\usr\bin (추가)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xming-x-server-설치&quot;&gt;Xming X server 설치&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;https://sourceforge.net/projects/xming/?source=directory&lt;/li&gt;
  &lt;li&gt;linux게임을 GUI로 표현할 때 사용되는듯…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;atari-설치&quot;&gt;atari 설치&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;git 설치&lt;/li&gt;
  &lt;li&gt;cmd 실행
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;git clone https://github.com/rybskej/atari-py&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;cd atari-py&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;python setup.py install&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;pip install -U git+https://github.com/Kojoley/atari-py.git&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;오류수정&quot;&gt;오류수정&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pip install gym[atari]로 하면 오류남&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="Reinforcement Learning" /><summary type="html">Machine Learning</summary></entry><entry><title type="html">RL_note #6</title><link href="http://localhost:4000/RL_note-6/" rel="alternate" type="text/html" title="RL_note #6" /><published>2017-12-22T00:00:00+09:00</published><updated>2017-12-22T00:00:00+09:00</updated><id>http://localhost:4000/RL_note#6</id><content type="html" xml:base="http://localhost:4000/RL_note-6/">&lt;h1 id=&quot;강화학습&quot;&gt;강화학습&lt;/h1&gt;

&lt;h4 id=&quot;목표&quot;&gt;목표&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;브레이크아웃 게임을 DQN과 A3C로 풀기&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;브레이크아웃&quot;&gt;브레이크아웃&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;아타리 회사에서 개발한 벽부수기 게임(핑퐁)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;브레이크아웃의-문제&quot;&gt;브레이크아웃의 문제&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이미지를 입력형태로 넣기 어려움 -&amp;gt; CNN&lt;/li&gt;
  &lt;li&gt;픽셀 수가 너무 많음 -&amp;gt; 전처리&lt;/li&gt;
  &lt;li&gt;공의 진행방향을 알려면 프레임을 여러개 입력 받아야 함 -&amp;gt; 프레임스킵&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;브레이크아웃과-cnnconvolution-neural-net&quot;&gt;브레이크아웃과 CNN(Convolution Neural Net.)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;영상인식 분야에서 많이 사용되는 신경망&lt;/li&gt;
      &lt;li&gt;필터를 통한 이미지 추상화 후 입력&lt;/li&gt;
      &lt;li&gt;DQN, A3C 알고리즘으로 행동 개선&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# CNN&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;\
      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;# DQN 신경망&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;전처리&quot;&gt;전처리&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이미지를 흑백으로 처리&lt;/li&gt;
  &lt;li&gt;불필요한 공간을 잘라내고 사이즈를 줄임&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;프레임-스킵&quot;&gt;프레임 스킵&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;여러 프레임을 놓고 일정 간격으로 프레임 선택&lt;/li&gt;
  &lt;li&gt;‘BreakoutDeterministic-v4’부터는 자동지원&lt;/li&gt;
  &lt;li&gt;프레임 입력은 [1,2,3,4], [2,3,4,5], … 식으로 겹쳐서 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;브레이크아웃과-dqn&quot;&gt;브레이크아웃과 DQN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;state = 4개의 과거 프레임을 겹친것(depth = 4)&lt;/li&gt;
      &lt;li&gt;방향 = 왼쪽, 오른쪽, 정지&lt;/li&gt;
      &lt;li&gt;q함수 = 각 방향으로 진행했을 경우 받을 보상의 합(동일)&lt;/li&gt;
      &lt;li&gt;가장 높은 q함수를 선택하여 정책 개선(가치기반)&lt;/li&gt;
      &lt;li&gt;cost는 기존대로 (정답 Q함수 - 예측 Q함수)^2&lt;/li&gt;
      &lt;li&gt;경험리플레이를 사용&lt;/li&gt;
      &lt;li&gt;행동 -&amp;gt; 행동 -&amp;gt; 행동 -&amp;gt; … -&amp;gt; 행동 -&amp;gt; 개선 -&amp;gt; 행동 -&amp;gt; 개선 -&amp;gt; …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;경험리플레이
    &lt;ul&gt;
      &lt;li&gt;각각의 상태를 저장해 놨다가 쌓이면 랜덤으로 꺼내서 개선&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;신경망(model, target_model)
    &lt;ul&gt;
      &lt;li&gt;현재 상태에 대한 q함수 예측&lt;/li&gt;
      &lt;li&gt;입력 : 현재 상태에 대한 정보&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;심층신경망(입력층1, 은닉층2, 출력층1:linear)&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;출력 : q함수 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;행동 및 개선
    &lt;ul&gt;
      &lt;li&gt;현재 상태(s)를 입력으로 심층신경망을 통하여 q함수 테이블을 만들고 그 중 최고값을 행동으로 선택(a) (가끔식 모험)&lt;/li&gt;
      &lt;li&gt;행동에 따른 보상(r)과 다음 상태(s’)를 추출&lt;/li&gt;
      &lt;li&gt;s, a, r, s’ 저장&lt;/li&gt;
      &lt;li&gt;s’으로 이동&lt;/li&gt;
      &lt;li&gt;일정 이상의 데이터가 쌓일 때까지 계속 행동&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개선
    &lt;ul&gt;
      &lt;li&gt;일정치 이상 데이터가 쌓였다면 개선 시작(이 다음부터는 행동 한 번에 개선 한 번)&lt;/li&gt;
      &lt;li&gt;데이터들 중 무작위로 추출&lt;/li&gt;
      &lt;li&gt;(s,a)로 q추출(model 사용) / r / (s)로 q’의 최고값 추출(target_model 사용)&lt;/li&gt;
      &lt;li&gt;딥살사와 다른점은 action과 상관없이 최고 q함수 선택&lt;/li&gt;
      &lt;li&gt;s 입력, (r + 감가율  * q’) 정답으로 신경망 개선(model)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;추가&quot;&gt;추가&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;후버로스 그래프
    &lt;ul&gt;
      &lt;li&gt;기존 오류함수(2차함수)보다 더 안정적&lt;/li&gt;
      &lt;li&gt;-1 ~ 1 사이의 값은 2차함수를 따르고 나머지 부분은 1차함수 그래프&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;브레이크아웃과-a3c&quot;&gt;브레이크아웃과 A3C&lt;/h4&gt;</content><author><name></name></author><category term="Reinforcement Learning" /><summary type="html">Machine Learning</summary></entry></feed>